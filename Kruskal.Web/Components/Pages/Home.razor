    @page "/"

<PageTitle>Home</PageTitle>
<div id="main-container">
    <form id="matrix-form" @onsubmit="SubmitForm">
        <div id="matrix-form-inputs">
            <table>
                <tr>
                    <th></th>
                    @foreach (var label in rowLabels)
                    {
                        <th>@label</th>
                    }
                </tr>
                @for (int i = 0; i < 4; i++)
                {
                    <tr>
                        <td><strong>@rowLabels[i]</strong></td>
                        @for (int j = 0; j < 4; j++)
                        {
                            var index = i * 4 + j; // Calculate the index
                            <td>
                                <input type="number" @bind="@matrixValues[index]" />
                            </td>
                        }
                    </tr>
                }
            </table>
        </div>
        <button type="submit" class="btn btn-primary">Submit</button>
    </form>
    <div id="graph-div">
        @if (formSubmitted)
        {
            <svg width="400" height="400">
                <!-- Draw vertices -->
                @foreach (var vertex in vertices)
                {
                    <circle cx="@vertex.Location.x" cy="@vertex.Location.y" r="10" fill="red" />
                    <text>
                        <span x="@((vertex.Location.x - 5))" y="@((vertex.Location.y + 5))">@vertex.Name</span>
                    </text>
                }

                @foreach (var edge in startingEdges)
                {
                    var sourcePosition = edge.Source.Location;
                    var destinationPosition = edge.Destination.Location;

                    <line x1="@sourcePosition.x" y1="@sourcePosition.y"
                          x2="@destinationPosition.x" y2="@destinationPosition.y"
                          style="stroke:black; stroke-width:2" />
                    @* Add labels for the edges here *@
                }


            </svg>
        }
    </div>
</div>

@code {
    private Kruskal kruskal = new();
    private int[] matrixValues = new int[16]; // Use a flat array
    private char[] rowLabels = new[] { 'A', 'B', 'C', 'D' };
    private Vertex[] vertices = new[] { new Vertex('A'), new Vertex('B'), new Vertex('C'), new Vertex('D') };
    private int totalCost = 0;
    private List<Edge> startingEdges = new List<Edge>();
    private Random random = new Random();
    private bool formSubmitted = false;


    (int x, int y) vertexAPosition;
    (int x, int y) vertexBPosition;
    (int x, int y) vertexCPosition;
    (int x, int y) vertexDPosition;


    protected override void OnInitialized()
    {
        // Initialize matrixValues to all zeroes
        Array.Fill(matrixValues, 0);
    }

    private void SubmitForm()
    {
        formSubmitted = true;

        // Clear startingEdges before populating
        startingEdges.Clear();

        // Populate startingEdges based on matrixValues
        for (int i = 0; i < 4; i++)
        {
            for (int j = 0; j < 4; j++)
            {
                int index = i * 4 + j; // Calculate the index
                int value = matrixValues[index];

                if (value != 0)
                {
                    Vertex src = vertices[j]; 
                    Vertex dest = vertices[i];

                    src.Location = GetVertexPosition(src);
                    dest.Location = GetVertexPosition(dest);

                    startingEdges.Add(new Edge(value, src, dest));
                }
            }
        }
    }

    private (int x, int y) GetVertexPosition(Vertex vertex)
    {
        return ((Array.IndexOf(rowLabels, vertex.Name) * 100 + 50), (random.Next(100, 300)));
    }
}
