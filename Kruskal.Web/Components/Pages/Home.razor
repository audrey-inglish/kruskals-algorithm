    @inject NavigationManager NavManager
    @page "/"

<HeadContent>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Aleo:ital,wght@0,100..900;1,100..900&family=Sedan:ital@0;1&display=swap" rel="stylesheet">

    <style>
        body {
            background-color: #FEFAF6;
            font-family: "Aleo", serif;
    </style>
</HeadContent>


<PageTitle>Home</PageTitle>
<nav><h1>Kruskal's Algorithm</h1></nav>
<div id="full-container">
    <div id="main-container">
        <form id="matrix-form" @onsubmit="SubmitForm">
            <div id="matrix-form-inputs">
                <table>
                    <tr>
                        <th></th>
                        @foreach (var label in rowLabels)
                        {
                            <th>@label</th>
                        }
                    </tr>
                    @for (int i = 0; i < 4; i++)
                    {
                        <tr>
                            <td><strong>@rowLabels[i]</strong></td>
                            @for (int j = 0; j < 4; j++)
                            {
                                var index = i * 4 + j; // Calculate the index
                                <td>
                                    <input type="number" @bind="@matrixValues[index]" />
                                </td>
                            }
                        </tr>
                    }
                </table>
            </div>
            <button type="submit" class="btn btn-primary">Build Tree</button>
        </form>
        <div id="initial-graph-div">
            <h3>Initial Graph</h3>
            @if (formSubmitted)
            {
                <div class="svg-container">

                    <svg width="400" height="400">

                        @foreach (var edge in startingEdges)
                        {
                            var sourcePosition = edge.Source.Location;
                            var destinationPosition = edge.Destination.Location;

                            <line x1="@sourcePosition.x" y1="@sourcePosition.y"
                                  x2="@destinationPosition.x" y2="@destinationPosition.y"
                                  style="stroke:black; stroke-width:2" />
                            <text>
                                <text x="@(((sourcePosition.x + destinationPosition.x)/2)-6)" y="@(((sourcePosition.y + destinationPosition.y)/2)-6)">@edge.Weight</text>
                            </text>


                            @if (edge.Source.Name.Equals(edge.Destination.Name))
                            {
                                var cx = sourcePosition.x + 40;
                                var cy = sourcePosition.y - 40;
                                int dx = 0;
                                int dy = 0;


                                switch (edge.Source.Name)
                                {
                                    case 'A':
                                        dx = 0;
                                        dy = 1;
                                        break;
                                    case 'B':
                                        if (sourcePosition.y > vertices[2].Location.y || sourcePosition.y > vertices[0].Location.y)
                                        {
                                            dx = 1;
                                            dy = 0;
                                        }
                                        else
                                        {
                                            dx = -1;
                                            dy = 0;
                                        }
                                        break;
                                    case 'C':
                                        if (sourcePosition.y > vertices[1].Location.y)
                                        {
                                            dx = 1;
                                            dy = 0;
                                        }
                                        else
                                        {
                                            dx = -1;
                                            dy = 0;
                                        }

                                        break;
                                    case 'D':
                                        dx = 0;
                                        dy = -1;
                                        break;
                                }

                                <path d="M @(sourcePosition.x) @(sourcePosition.y) a 22 22 0 1 0 @(dx) @(dy)" fill="none" stroke="#cfbea9" stroke-width="2" />
                            }
                        }

                        <!-- Draw vertices -->
                        @foreach (var vertex in vertices)
                        {
                            <circle cx="@vertex.Location.x" cy="@vertex.Location.y" r="20" fill="#102C57" />
                            <text>
                                <text fill="#FEFAF6" x="@((vertex.Location.x -6))" y="@((vertex.Location.y + 6))">@vertex.Name </text>
                            </text>
                        }


                    </svg>
                </div>
                @if (!ranKruskal)
                {
                    <button id="kruskal-btn" @onclick="RunKruskal">Run Kruskal's Algorithm</button>
                }
            }
        </div>
        <div id="minimal-graph-div">
            <h3>Minimal Spanning Tree</h3>
            @if (ranKruskal)
            {
                <div class="svg-container">

                    <svg width="400" height="400">

                        @foreach (var edge in minimalEdges)
                        {
                            var sourcePosition = edge.Source.Location;
                            var destinationPosition = edge.Destination.Location;

                            <line x1="@sourcePosition.x" y1="@sourcePosition.y"
                                  x2="@destinationPosition.x" y2="@destinationPosition.y"
                                  style="stroke:black; stroke-width:2" />
                            <text>
                                <text x="@(((sourcePosition.x + destinationPosition.x)/2)-6)" y="@(((sourcePosition.y + destinationPosition.y)/2)-6)">@edge.Weight</text>
                            </text>


                        }

                        <!-- Draw vertices -->
                        @foreach (var vertex in vertices)
                        {
                            <circle cx="@vertex.Location.x" cy="@vertex.Location.y" r="20" fill="#102C57" />
                            <text>
                                <text fill="#FEFAF6" x="@((vertex.Location.x -6))" y="@((vertex.Location.y + 6))">@vertex.Name </text>
                            </text>
                        }

                    </svg>
                </div>

                <span id="cost-span"><strong>Total Cost:</strong> @totalCost</span>
            }


        </div>
    </div>

    <button id="reset-button" @onclick="ResetForm">Reset</button>
</div>

@code {
    private Kruskal kruskal = new();
    private int[] matrixValues = new int[16]; // Use a flat array
    private char[] rowLabels = new[] { 'A', 'B', 'C', 'D' };
    private Vertex[] vertices = new[] { new Vertex('A'), new Vertex('B'), new Vertex('C'), new Vertex('D') };
    private int totalCost;
    private List<Edge> startingEdges = new List<Edge>();
    private List<Edge> minimalEdges = new List<Edge>();
    private Random random = new Random();
    private bool formSubmitted = false;
    private bool ranKruskal = false;



    protected override void OnInitialized()
    {
        // Initialize matrixValues to all zeroes
        Array.Fill(matrixValues, 0);

        vertices[0].Location = (50, 50);   // Vertex 'A'
        vertices[1].Location = (200, 50);  // Vertex 'B'
        vertices[2].Location = (50, 200);  // Vertex 'C'
        vertices[3].Location = (200, 200); // Vertex 'D'
    }


    private void SubmitForm()
    {
        formSubmitted = true;

        startingEdges.Clear();

        // Populate startingEdges based on matrixValues
        for (int i = 0; i < 4; i++)
        {
            for (int j = 0; j < 4; j++)
            {
                int index = i * 4 + j; // Calculate the index
                int value = matrixValues[index];

                if (value != 0)
                {
                    Vertex src = vertices[j];
                    Vertex dest = vertices[i];

                    src.Location = GetVertexPositionValidated(src);
                    dest.Location = GetVertexPositionValidated(dest);

                    startingEdges.Add(new Edge(value, src, dest));
                }
            }
        }
    }

    private void ResetForm()
    {
        NavManager.NavigateTo(NavManager.Uri, forceLoad: true);
    }

    public void RunKruskal()
    {
        minimalEdges = kruskal.FindMinimumSpanningTree(startingEdges, out totalCost);
        ranKruskal = true;
        StateHasChanged();
    }

    private (int x, int y) GetVertexPosition(Vertex vertex)
    {
        int x = Array.IndexOf(rowLabels, vertex.Name) * 100 + 50;
        int y = random.Next(100, 300);

        // implement validation to keep vertices away from each others' x and y axes

        return (x, y);
    }

    private (int x, int y) GetVertexPositionValidated(Vertex vertex)
    {
        int x = Array.IndexOf(rowLabels, vertex.Name) * 100 + 50;
        int y = random.Next(100, 300);
        int minDistance = 55;
        bool converged = false;
        int maxIterations = 1000;
        int iteration = 0;

        while (!converged && iteration < maxIterations)
        {
            converged = true;

            // Adjust the y-coordinate to satisfy the minimum distance constraint
            foreach (var otherVertex in vertices)
            {
                if (vertex != otherVertex)
                {
                    if (Math.Abs(y - otherVertex.Location.y) < minDistance)
                    {
                        // Move the y-coordinate away from the other vertex
                        y += (y < otherVertex.Location.y) ? -1 : 1;
                        converged = false;
                    }
                }
            }

            iteration++;
        }

        return (x, y);
    }
}
