@page "/"

<PageTitle>Home</PageTitle>
<div id="main-container">
    <form id="matrix-form" @onsubmit="SubmitForm">
        <div id="matrix-form-inputs">
            <table>
                <tr>
                    <th></th>
                    @foreach (var label in rowLabels)
                    {
                        <th>@label</th>
                    }
                </tr>
                @for (int i = 0; i < 4; i++)
                {
                    <tr>
                        <td><strong>@rowLabels[i]</strong></td>
                        @for (int j = 0; j < 4; j++)
                        {
                            <td>
                                <input @bind="matrixValues[i, j]" />
                            </td>
                        }
                    </tr>
                }
            </table>
        </div>
        <button type="submit" class="btn btn-primary">Submit</button>
    </form>
    <div id="graph-div">
        @if (formSubmitted)
        {
            <svg width="400" height="400">
                <!-- Draw vertices -->
                @foreach (var vertex in vertices)
                {
                    <circle cx="@GetVertexXPosition(vertex)" cy="@GetVertexYPosition(vertex)" r="10" fill="red" />
                    <text>
                        <tspan x="@((GetVertexXPosition(vertex) - 5))" y="@((GetVertexYPosition(vertex) + 5))">@vertex.Name</tspan>
                    </text>
                }

                <!-- Draw edges -->
                @foreach (var edge in startingEdges)
                {
                    <line x1="@GetVertexXPosition(edge.Source)" y1="@GetVertexYPosition(edge.Source)"
                          x2="@GetVertexXPosition(edge.Destination)" y2="@GetVertexYPosition(edge.Destination)"
                          style="stroke:black; stroke-width:2" />
                }
            </svg>
        }
    </div>
</div>

@code {
    private Kruskal kruskal = new();
    private int[,] matrixValues = new int[4, 4];
    private char[] rowLabels = new[] { 'A', 'B', 'C', 'D' };
    private Vertex[] vertices = new[] { new Vertex('A'), new Vertex('B'), new Vertex('C'), new Vertex('D') };
    private int totalCost = 0;
    private List<Edge> startingEdges = new List<Edge>();
    private Random random = new Random();
    private bool formSubmitted = false;

    private void SubmitForm()
    {
        formSubmitted = true;

        // Process form submission
        startingEdges.Clear();

        // Populate startingEdges based on matrixValues
        for (int i = 0; i < 4; i++)
        {
            for (int j = 0; j < 4; j++)
            {
                var currentValue = matrixValues[i, j];
                if (currentValue != 0)
                {
                    Vertex src = new Vertex(rowLabels[j]);
                    Vertex dest = new Vertex(rowLabels[i]);
                    startingEdges.Add(new Edge(currentValue, src, dest));
                }
            }
        }
    }

    private int GetVertexXPosition(Vertex vertex)
    {
        return Array.IndexOf(rowLabels, vertex.Name) * 100 + 50;
    }

    private int GetVertexYPosition(Vertex vertex)
    {
        return random.Next(100, 300);
    }
}
