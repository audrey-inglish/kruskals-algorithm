@page "/"

@* <HeadContent>
    <link href="Home.razor.css" rel="stylesheet" />
</HeadContent> *@
@* <style>
    body {
        background-color: #F0EBE3;
    }
</style> *@

<PageTitle>Home</PageTitle>
<div id="main-container">
    <form id="matrix-form">
        <div id="matrix-form-inputs">
            <table>
                <tr>
                    <th></th>
                    @foreach (var label in rowLabels)
                    {
                        <th>@label</th>
                    }

                </tr>
                @for (int i = 0; i < 4; i++)
                {
                    <tr>
                        <td><strong>@rowLabels[i]</strong></td>
                        @for (int j = 0; j < 4; j++)
                        {
                            <td>
                                <input @bind="matrixValues[i, j]" />
                            </td>
                        }
                    </tr>
                }
            </table>
        </div>



        <button type="submit" class="btn btn-primary">Submit</button>
    </form>
    <div id="graph-div">
        <svg width="400" height="400">
            <!-- Draw vertices -->
            @foreach (var vertex in vertices)
            {
                <circle cx="@GetVertexXPosition(vertex)" cy="@GetVertexYPosition(vertex)" r="10" fill="red" />
                <text>
                    <tspan x="@((GetVertexXPosition(vertex) - 5))" y="@((GetVertexYPosition(vertex) + 5))">@vertex.Name</tspan>
                </text>
            }

            <!-- Draw edges -->
            @foreach (var edge in startingEdges)
            {
                <line x1="@GetVertexXPosition(edge.Source)" y1="@GetVertexYPosition(edge.Source)"
                      x2="@GetVertexXPosition(edge.Destination)" y2="@GetVertexYPosition(edge.Destination)"
                      style="stroke:black, stroke-width:2" />
            }
        </svg>
    </div>

</div>

@code {
    private Kruskal kruskal = new();
    private int[,] matrixValues = new int[4, 4];
    private char[] rowLabels = new[] { 'A', 'B', 'C', 'D' };
    private Vertex[] vertices = new[] { new Vertex('A'), new('B'), new('C'), new('D') };
    private int totalCost = 0;
    List<Edge> startingEdges = new();
    Random random = new Random();

    private void SubmitForm()
    {

        //i is the column (to), and j is the row (from)
        for (int i = 0; i < 4; i++)
        {
            for (int j = 0; j < 4; j++)
            {
                // if (i == 0 && j == 0)
                //{
                //set an error message saying there must be no self-cycles
                //actually, might not have to do anything here
                //}


                var currentValue = matrixValues[i, j];
                if (currentValue != 0) //value being zero means no edge
                {
                    Vertex src = new Vertex(rowLabels[j]);
                    Vertex dest = new Vertex(rowLabels[i]);
                    startingEdges.Add(new Edge(currentValue, src, dest));
                }
            }
        }


    }

    //when they click a button
    private List<Edge> FindMinimumSpan()
    {
        return kruskal.FindMinimumSpanningTree(startingEdges, out totalCost);
    }

    private int GetVertexXPosition(Vertex vertex)
    {
        return Array.IndexOf(rowLabels, vertex.Name) * 100 + 50;
    }

    private int GetVertexYPosition(Vertex vertex)
    {
        return random.Next(100, 300);
    }

}
